name: Build and Publish on Tag

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*.*.*'
      - 'test-*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m venv venv
          .\venv\Scripts\activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build executables
        run: |
          .\venv\Scripts\activate
          pyinstaller --onefile --windowed --clean `
            --hidden-import wx._xml `
            --hidden-import wx._core `
            --hidden-import wx.richtext `
            --hidden-import wx.xml `
            --hidden-import wx.xrc `
            --add-data "src/config.json.template;." `
            --add-data "src/assets/icon_connection_red.png;assets" `
            --add-data "src/assets/icon_connection_green.png;assets" `
            --add-data "src/assets/SCLogAnalyzer.ico;assets" `
            --add-binary "venv\Lib\site-packages\pyzbar\libiconv.dll;." `
            --add-binary "venv\Lib\site-packages\pyzbar\libzbar-64.dll;." `
            --name SCLogAnalyzer `
            --icon src/assets/SCLogAnalyzer.ico `
            src/gui.py

      - name: Archive Windows Executable Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/*.exe

      - name: Compress executables into a zip
        run: |
          $tag_name = "${{ github.ref_name }}"
          #Compress-Archive -Path dist/log_analyzer.exe -DestinationPath dist/log_analyzer-${tag_name}.zip -Update
          Compress-Archive -Path dist/SCLogAnalyzer.exe -DestinationPath dist/SCLogAnalyzer-${tag_name}.zip -Update


      - name: Publish SCLogAnalyzer release
        if: startsWith(github.ref_name, 'test-') == false && steps.check_release.outputs.result != 'not_found'
        uses: ncipollo/release-action@v1
        with:
          artifacts: dist/SCLogAnalyzer-${{ github.ref_name }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: SCLogAnalyzer Release ${{ github.ref_name }}

      - name: Send notification to Discord
        run: |
          $releaseUrl = "https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          $payload = @{
            content = "A new version of SCLogAnalyzer ${{ github.ref_name }} has been built and uploaded successfully."
            embeds = @(
              @{
                title = "Download Release"
                url = $releaseUrl
                color = 5814783
                description = "Click here to download the latest version"
              }
            )
          } | ConvertTo-Json -Depth 10
          Invoke-RestMethod -Uri ${{ secrets.DISCORD_WEBHOOK_URL }} -Method Post -Body $payload -ContentType "application/json"

  docker-build:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          tag_name="${{ github.ref_name }}"
          docker build -t scloganalyzer-bot-${tag_name} .
          docker save scloganalyzer-bot-${tag_name} | gzip > scloganalyzer-bot-${tag_name}.tar.gz

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: scloganalyzer-bot-${{ github.ref_name }}.tar.gz

      - name: Publish Docker tar.gz release
        if: startsWith(github.ref_name, 'test-') == false
        uses: ncipollo/release-action@v1
        with:
          artifacts: scloganalyzer-bot-${{ github.ref_name }}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}-docker
          name: StatsBoardBot Docker Image Release ${{ github.ref_name }}

  cleanup-releases:
    runs-on: ubuntu-latest

    steps:
      - name: Delete all releases except the latest three
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          releases=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[].id')

          # Keep the last 3 release IDs
          releases_to_delete=$(echo "$releases" | tail -n +4)

          for release_id in $releases_to_delete; do
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases/$release_id
          done